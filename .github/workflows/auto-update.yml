name: Auto Update on Push

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  auto-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Get current date
        id: date
        run: echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
      
      - name: Update CHANGELOG with latest changes
        run: |
          CURRENT_DATE="${{ steps.date.outputs.date }}"
          
          # Get commits since last tag or all commits if no tags
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tag found, using all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            echo "Last tag: $LAST_TAG"
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # Only update if there are new commits
          if [ -z "$COMMITS" ]; then
            echo "No new commits since last tag, skipping update"
            exit 0
          fi
          
          # Categorize commits
          FEATURES=$(echo "$COMMITS" | grep -i "feat:" || echo "")
          FIXES=$(echo "$COMMITS" | grep -i "fix:" || echo "")
          DOCS=$(echo "$COMMITS" | grep -i "docs:" || echo "")
          CHORE=$(echo "$COMMITS" | grep -i "chore:" || echo "")
          SECURITY=$(echo "$COMMITS" | grep -i "security:" || echo "")
          OTHER=$(echo "$COMMITS" | grep -v -i -E "(feat:|fix:|docs:|chore:|security:)" || echo "")
          
          # Create unreleased section update
          cat > unreleased_update.md << EOF
          ## [Unreleased] - $CURRENT_DATE
          
          EOF
          
          # Add categorized sections
          if [ -n "$FEATURES" ]; then
            echo "### Added" >> unreleased_update.md
            echo "$FEATURES" >> unreleased_update.md
            echo "" >> unreleased_update.md
          fi
          
          if [ -n "$FIXES" ]; then
            echo "### Fixed" >> unreleased_update.md
            echo "$FIXES" >> unreleased_update.md
            echo "" >> unreleased_update.md
          fi
          
          if [ -n "$DOCS" ]; then
            echo "### Changed" >> unreleased_update.md
            echo "$DOCS" >> unreleased_update.md
            echo "" >> unreleased_update.md
          fi
          
          if [ -n "$CHORE" ]; then
            echo "### Changed" >> unreleased_update.md
            echo "$CHORE" >> unreleased_update.md
            echo "" >> unreleased_update.md
          fi
          
          if [ -n "$SECURITY" ]; then
            echo "### Security" >> unreleased_update.md
            echo "$SECURITY" >> unreleased_update.md
            echo "" >> unreleased_update.md
          fi
          
          if [ -n "$OTHER" ]; then
            echo "### Changed" >> unreleased_update.md
            echo "$OTHER" >> unreleased_update.md
            echo "" >> unreleased_update.md
          fi
          
          # Update CHANGELOG.md
          if [ -f "CHANGELOG.md" ]; then
            # Replace the unreleased section
            sed '/^## \[Unreleased\]/,/^---$/c\
          ## [Unreleased]\
          \
          ### Added\
          - TBD\
          \
          ### Changed\
          - TBD\
          \
          ### Deprecated\
          - TBD\
          \
          ### Removed\
          - TBD\
          \
          ### Fixed\
          - TBD\
          \
          ### Security\
          - TBD\
          \
          ---' CHANGELOG.md > temp_changelog.md
            
            # Insert new unreleased section at the top
            cat unreleased_update.md temp_changelog.md > CHANGELOG.md
            rm temp_changelog.md unreleased_update.md
          else
            # Create new changelog
            cat > CHANGELOG.md << EOF
          # Changelog
          
          All notable changes to this project will be documented in this file.
          
          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
          
          $(cat unreleased_update.md)
          
          EOF
            rm unreleased_update.md
          fi
          
          echo "Updated CHANGELOG.md with latest changes"
      
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "docs: update changelog with latest changes"
            git push origin main
            echo "Updated CHANGELOG.md and pushed changes"
          fi
